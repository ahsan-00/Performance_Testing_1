/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 589.0, "minX": 0.0, "maxY": 20541.0, "series": [{"data": [[0.0, 589.0], [0.1, 589.0], [0.2, 591.0], [0.3, 591.0], [0.4, 591.0], [0.5, 592.0], [0.6, 593.0], [0.7, 593.0], [0.8, 593.0], [0.9, 596.0], [1.0, 604.0], [1.1, 604.0], [1.2, 605.0], [1.3, 606.0], [1.4, 606.0], [1.5, 608.0], [1.6, 626.0], [1.7, 626.0], [1.8, 634.0], [1.9, 658.0], [2.0, 662.0], [2.1, 662.0], [2.2, 665.0], [2.3, 668.0], [2.4, 668.0], [2.5, 674.0], [2.6, 684.0], [2.7, 684.0], [2.8, 690.0], [2.9, 707.0], [3.0, 719.0], [3.1, 719.0], [3.2, 723.0], [3.3, 725.0], [3.4, 725.0], [3.5, 736.0], [3.6, 738.0], [3.7, 738.0], [3.8, 766.0], [3.9, 768.0], [4.0, 771.0], [4.1, 771.0], [4.2, 775.0], [4.3, 776.0], [4.4, 776.0], [4.5, 798.0], [4.6, 820.0], [4.7, 820.0], [4.8, 826.0], [4.9, 840.0], [5.0, 840.0], [5.1, 847.0], [5.2, 851.0], [5.3, 859.0], [5.4, 859.0], [5.5, 877.0], [5.6, 889.0], [5.7, 889.0], [5.8, 897.0], [5.9, 897.0], [6.0, 897.0], [6.1, 910.0], [6.2, 931.0], [6.3, 948.0], [6.4, 948.0], [6.5, 961.0], [6.6, 997.0], [6.7, 997.0], [6.8, 1012.0], [6.9, 1031.0], [7.0, 1031.0], [7.1, 1033.0], [7.2, 1036.0], [7.3, 1038.0], [7.4, 1038.0], [7.5, 1048.0], [7.6, 1058.0], [7.7, 1058.0], [7.8, 1062.0], [7.9, 1077.0], [8.0, 1077.0], [8.1, 1079.0], [8.2, 1080.0], [8.3, 1092.0], [8.4, 1092.0], [8.5, 1105.0], [8.6, 1112.0], [8.7, 1112.0], [8.8, 1136.0], [8.9, 1146.0], [9.0, 1146.0], [9.1, 1160.0], [9.2, 1165.0], [9.3, 1166.0], [9.4, 1166.0], [9.5, 1179.0], [9.6, 1183.0], [9.7, 1183.0], [9.8, 1189.0], [9.9, 1190.0], [10.0, 1196.0], [10.1, 1196.0], [10.2, 1203.0], [10.3, 1204.0], [10.4, 1204.0], [10.5, 1205.0], [10.6, 1214.0], [10.7, 1214.0], [10.8, 1218.0], [10.9, 1226.0], [11.0, 1233.0], [11.1, 1233.0], [11.2, 1244.0], [11.3, 1245.0], [11.4, 1245.0], [11.5, 1247.0], [11.6, 1257.0], [11.7, 1257.0], [11.8, 1264.0], [11.9, 1265.0], [12.0, 1277.0], [12.1, 1277.0], [12.2, 1295.0], [12.3, 1297.0], [12.4, 1297.0], [12.5, 1305.0], [12.6, 1310.0], [12.7, 1310.0], [12.8, 1320.0], [12.9, 1330.0], [13.0, 1346.0], [13.1, 1346.0], [13.2, 1362.0], [13.3, 1371.0], [13.4, 1371.0], [13.5, 1378.0], [13.6, 1393.0], [13.7, 1393.0], [13.8, 1395.0], [13.9, 1404.0], [14.0, 1414.0], [14.1, 1414.0], [14.2, 1446.0], [14.3, 1451.0], [14.4, 1451.0], [14.5, 1467.0], [14.6, 1471.0], [14.7, 1471.0], [14.8, 1482.0], [14.9, 1483.0], [15.0, 1491.0], [15.1, 1491.0], [15.2, 1495.0], [15.3, 1509.0], [15.4, 1509.0], [15.5, 1517.0], [15.6, 1525.0], [15.7, 1525.0], [15.8, 1544.0], [15.9, 1566.0], [16.0, 1590.0], [16.1, 1590.0], [16.2, 1598.0], [16.3, 1609.0], [16.4, 1609.0], [16.5, 1620.0], [16.6, 1629.0], [16.7, 1629.0], [16.8, 1641.0], [16.9, 1651.0], [17.0, 1653.0], [17.1, 1653.0], [17.2, 1670.0], [17.3, 1676.0], [17.4, 1676.0], [17.5, 1686.0], [17.6, 1711.0], [17.7, 1711.0], [17.8, 1715.0], [17.9, 1734.0], [18.0, 1737.0], [18.1, 1737.0], [18.2, 1738.0], [18.3, 1749.0], [18.4, 1749.0], [18.5, 1751.0], [18.6, 1755.0], [18.7, 1755.0], [18.8, 1758.0], [18.9, 1767.0], [19.0, 1776.0], [19.1, 1776.0], [19.2, 1786.0], [19.3, 1786.0], [19.4, 1786.0], [19.5, 1786.0], [19.6, 1789.0], [19.7, 1789.0], [19.8, 1799.0], [19.9, 1802.0], [20.0, 1814.0], [20.1, 1814.0], [20.2, 1817.0], [20.3, 1817.0], [20.4, 1817.0], [20.5, 1818.0], [20.6, 1824.0], [20.7, 1824.0], [20.8, 1828.0], [20.9, 1830.0], [21.0, 1830.0], [21.1, 1830.0], [21.2, 1836.0], [21.3, 1840.0], [21.4, 1840.0], [21.5, 1843.0], [21.6, 1844.0], [21.7, 1844.0], [21.8, 1847.0], [21.9, 1851.0], [22.0, 1852.0], [22.1, 1852.0], [22.2, 1858.0], [22.3, 1858.0], [22.4, 1858.0], [22.5, 1864.0], [22.6, 1865.0], [22.7, 1865.0], [22.8, 1866.0], [22.9, 1872.0], [23.0, 1874.0], [23.1, 1874.0], [23.2, 1874.0], [23.3, 1880.0], [23.4, 1880.0], [23.5, 1883.0], [23.6, 1883.0], [23.7, 1883.0], [23.8, 1884.0], [23.9, 1886.0], [24.0, 1892.0], [24.1, 1892.0], [24.2, 1895.0], [24.3, 1903.0], [24.4, 1903.0], [24.5, 1906.0], [24.6, 1913.0], [24.7, 1913.0], [24.8, 1914.0], [24.9, 1917.0], [25.0, 1921.0], [25.1, 1921.0], [25.2, 1921.0], [25.3, 1928.0], [25.4, 1928.0], [25.5, 1972.0], [25.6, 2005.0], [25.7, 2005.0], [25.8, 2023.0], [25.9, 2025.0], [26.0, 2027.0], [26.1, 2027.0], [26.2, 2034.0], [26.3, 2064.0], [26.4, 2064.0], [26.5, 2067.0], [26.6, 2099.0], [26.7, 2099.0], [26.8, 2146.0], [26.9, 2153.0], [27.0, 2173.0], [27.1, 2173.0], [27.2, 2190.0], [27.3, 2206.0], [27.4, 2206.0], [27.5, 2212.0], [27.6, 2224.0], [27.7, 2224.0], [27.8, 2279.0], [27.9, 2457.0], [28.0, 2462.0], [28.1, 2462.0], [28.2, 2482.0], [28.3, 2491.0], [28.4, 2491.0], [28.5, 2495.0], [28.6, 2496.0], [28.7, 2496.0], [28.8, 2515.0], [28.9, 2528.0], [29.0, 2536.0], [29.1, 2536.0], [29.2, 2552.0], [29.3, 2561.0], [29.4, 2561.0], [29.5, 2582.0], [29.6, 2615.0], [29.7, 2615.0], [29.8, 2642.0], [29.9, 2644.0], [30.0, 2649.0], [30.1, 2649.0], [30.2, 2666.0], [30.3, 2673.0], [30.4, 2673.0], [30.5, 2676.0], [30.6, 2676.0], [30.7, 2676.0], [30.8, 2686.0], [30.9, 2689.0], [31.0, 2698.0], [31.1, 2698.0], [31.2, 2715.0], [31.3, 2735.0], [31.4, 2735.0], [31.5, 2748.0], [31.6, 2764.0], [31.7, 2764.0], [31.8, 2777.0], [31.9, 2789.0], [32.0, 2800.0], [32.1, 2800.0], [32.2, 2801.0], [32.3, 2819.0], [32.4, 2819.0], [32.5, 2829.0], [32.6, 2853.0], [32.7, 2853.0], [32.8, 2859.0], [32.9, 2879.0], [33.0, 2889.0], [33.1, 2889.0], [33.2, 2892.0], [33.3, 2902.0], [33.4, 2902.0], [33.5, 2924.0], [33.6, 2924.0], [33.7, 2924.0], [33.8, 2940.0], [33.9, 2946.0], [34.0, 2951.0], [34.1, 2951.0], [34.2, 2969.0], [34.3, 2973.0], [34.4, 2973.0], [34.5, 2985.0], [34.6, 2985.0], [34.7, 2985.0], [34.8, 2993.0], [34.9, 3016.0], [35.0, 3017.0], [35.1, 3017.0], [35.2, 3031.0], [35.3, 3034.0], [35.4, 3034.0], [35.5, 3038.0], [35.6, 3089.0], [35.7, 3089.0], [35.8, 3090.0], [35.9, 3107.0], [36.0, 3110.0], [36.1, 3110.0], [36.2, 3111.0], [36.3, 3149.0], [36.4, 3149.0], [36.5, 3160.0], [36.6, 3165.0], [36.7, 3165.0], [36.8, 3166.0], [36.9, 3170.0], [37.0, 3170.0], [37.1, 3172.0], [37.2, 3174.0], [37.3, 3178.0], [37.4, 3178.0], [37.5, 3182.0], [37.6, 3184.0], [37.7, 3184.0], [37.8, 3185.0], [37.9, 3188.0], [38.0, 3188.0], [38.1, 3188.0], [38.2, 3191.0], [38.3, 3197.0], [38.4, 3197.0], [38.5, 3199.0], [38.6, 3202.0], [38.7, 3202.0], [38.8, 3208.0], [38.9, 3209.0], [39.0, 3209.0], [39.1, 3210.0], [39.2, 3219.0], [39.3, 3222.0], [39.4, 3222.0], [39.5, 3228.0], [39.6, 3230.0], [39.7, 3230.0], [39.8, 3245.0], [39.9, 3256.0], [40.0, 3256.0], [40.1, 3256.0], [40.2, 3256.0], [40.3, 3284.0], [40.4, 3284.0], [40.5, 3285.0], [40.6, 3287.0], [40.7, 3287.0], [40.8, 3289.0], [40.9, 3292.0], [41.0, 3292.0], [41.1, 3299.0], [41.2, 3306.0], [41.3, 3312.0], [41.4, 3312.0], [41.5, 3314.0], [41.6, 3314.0], [41.7, 3314.0], [41.8, 3318.0], [41.9, 3327.0], [42.0, 3327.0], [42.1, 3339.0], [42.2, 3344.0], [42.3, 3349.0], [42.4, 3349.0], [42.5, 3350.0], [42.6, 3356.0], [42.7, 3356.0], [42.8, 3363.0], [42.9, 3364.0], [43.0, 3364.0], [43.1, 3366.0], [43.2, 3370.0], [43.3, 3380.0], [43.4, 3380.0], [43.5, 3380.0], [43.6, 3382.0], [43.7, 3382.0], [43.8, 3385.0], [43.9, 3389.0], [44.0, 3389.0], [44.1, 3405.0], [44.2, 3405.0], [44.3, 3405.0], [44.4, 3405.0], [44.5, 3419.0], [44.6, 3421.0], [44.7, 3421.0], [44.8, 3432.0], [44.9, 3433.0], [45.0, 3433.0], [45.1, 3435.0], [45.2, 3437.0], [45.3, 3441.0], [45.4, 3441.0], [45.5, 3442.0], [45.6, 3448.0], [45.7, 3448.0], [45.8, 3462.0], [45.9, 3511.0], [46.0, 3511.0], [46.1, 3546.0], [46.2, 3564.0], [46.3, 3566.0], [46.4, 3566.0], [46.5, 3581.0], [46.6, 3600.0], [46.7, 3600.0], [46.8, 3603.0], [46.9, 3647.0], [47.0, 3647.0], [47.1, 3673.0], [47.2, 3685.0], [47.3, 3699.0], [47.4, 3699.0], [47.5, 3701.0], [47.6, 3706.0], [47.7, 3706.0], [47.8, 3717.0], [47.9, 3735.0], [48.0, 3735.0], [48.1, 3751.0], [48.2, 3761.0], [48.3, 3762.0], [48.4, 3762.0], [48.5, 3762.0], [48.6, 3766.0], [48.7, 3766.0], [48.8, 3780.0], [48.9, 3781.0], [49.0, 3781.0], [49.1, 3803.0], [49.2, 3816.0], [49.3, 3817.0], [49.4, 3817.0], [49.5, 3821.0], [49.6, 3841.0], [49.7, 3841.0], [49.8, 3859.0], [49.9, 3863.0], [50.0, 3863.0], [50.1, 3875.0], [50.2, 3878.0], [50.3, 3892.0], [50.4, 3892.0], [50.5, 3896.0], [50.6, 3898.0], [50.7, 3898.0], [50.8, 3904.0], [50.9, 3911.0], [51.0, 3911.0], [51.1, 3911.0], [51.2, 3915.0], [51.3, 3934.0], [51.4, 3934.0], [51.5, 3935.0], [51.6, 3942.0], [51.7, 3942.0], [51.8, 3943.0], [51.9, 3948.0], [52.0, 3948.0], [52.1, 3965.0], [52.2, 3967.0], [52.3, 3971.0], [52.4, 3971.0], [52.5, 3973.0], [52.6, 3991.0], [52.7, 3991.0], [52.8, 3992.0], [52.9, 3994.0], [53.0, 3994.0], [53.1, 4019.0], [53.2, 4022.0], [53.3, 4032.0], [53.4, 4032.0], [53.5, 4055.0], [53.6, 4183.0], [53.7, 4183.0], [53.8, 4341.0], [53.9, 4415.0], [54.0, 4415.0], [54.1, 4425.0], [54.2, 4432.0], [54.3, 4440.0], [54.4, 4440.0], [54.5, 4447.0], [54.6, 4460.0], [54.7, 4460.0], [54.8, 4465.0], [54.9, 4474.0], [55.0, 4474.0], [55.1, 4484.0], [55.2, 4511.0], [55.3, 4519.0], [55.4, 4519.0], [55.5, 4520.0], [55.6, 4532.0], [55.7, 4532.0], [55.8, 4659.0], [55.9, 4679.0], [56.0, 4679.0], [56.1, 4698.0], [56.2, 4700.0], [56.3, 4731.0], [56.4, 4731.0], [56.5, 4829.0], [56.6, 4858.0], [56.7, 4858.0], [56.8, 4882.0], [56.9, 4893.0], [57.0, 4893.0], [57.1, 4909.0], [57.2, 4917.0], [57.3, 4918.0], [57.4, 4918.0], [57.5, 4963.0], [57.6, 4972.0], [57.7, 4972.0], [57.8, 4973.0], [57.9, 4976.0], [58.0, 4976.0], [58.1, 4986.0], [58.2, 4998.0], [58.3, 5042.0], [58.4, 5042.0], [58.5, 5065.0], [58.6, 5117.0], [58.7, 5117.0], [58.8, 5154.0], [58.9, 5175.0], [59.0, 5175.0], [59.1, 5190.0], [59.2, 5416.0], [59.3, 5798.0], [59.4, 5798.0], [59.5, 5805.0], [59.6, 5862.0], [59.7, 5862.0], [59.8, 6043.0], [59.9, 6119.0], [60.0, 6119.0], [60.1, 6179.0], [60.2, 6197.0], [60.3, 6243.0], [60.4, 6243.0], [60.5, 6257.0], [60.6, 6330.0], [60.7, 6330.0], [60.8, 6349.0], [60.9, 6353.0], [61.0, 6353.0], [61.1, 6407.0], [61.2, 6409.0], [61.3, 6411.0], [61.4, 6411.0], [61.5, 6544.0], [61.6, 6562.0], [61.7, 6562.0], [61.8, 6570.0], [61.9, 6575.0], [62.0, 6575.0], [62.1, 6592.0], [62.2, 6630.0], [62.3, 6689.0], [62.4, 6689.0], [62.5, 6715.0], [62.6, 6717.0], [62.7, 6717.0], [62.8, 6720.0], [62.9, 6756.0], [63.0, 6756.0], [63.1, 6765.0], [63.2, 6789.0], [63.3, 6826.0], [63.4, 6826.0], [63.5, 6942.0], [63.6, 6945.0], [63.7, 6945.0], [63.8, 6970.0], [63.9, 6988.0], [64.0, 6988.0], [64.1, 7032.0], [64.2, 7120.0], [64.3, 7128.0], [64.4, 7128.0], [64.5, 7136.0], [64.6, 7147.0], [64.7, 7147.0], [64.8, 7176.0], [64.9, 7177.0], [65.0, 7177.0], [65.1, 7478.0], [65.2, 7545.0], [65.3, 7581.0], [65.4, 7581.0], [65.5, 7587.0], [65.6, 7592.0], [65.7, 7592.0], [65.8, 7606.0], [65.9, 7675.0], [66.0, 7675.0], [66.1, 7688.0], [66.2, 7711.0], [66.3, 7784.0], [66.4, 7784.0], [66.5, 7817.0], [66.6, 7822.0], [66.7, 7822.0], [66.8, 7830.0], [66.9, 7842.0], [67.0, 7842.0], [67.1, 7848.0], [67.2, 7849.0], [67.3, 7852.0], [67.4, 7852.0], [67.5, 7858.0], [67.6, 7859.0], [67.7, 7859.0], [67.8, 7862.0], [67.9, 7874.0], [68.0, 7874.0], [68.1, 7881.0], [68.2, 7897.0], [68.3, 7906.0], [68.4, 7906.0], [68.5, 7915.0], [68.6, 7927.0], [68.7, 7927.0], [68.8, 7927.0], [68.9, 7949.0], [69.0, 7949.0], [69.1, 7952.0], [69.2, 7970.0], [69.3, 8038.0], [69.4, 8038.0], [69.5, 8044.0], [69.6, 8089.0], [69.7, 8089.0], [69.8, 8091.0], [69.9, 8112.0], [70.0, 8112.0], [70.1, 8124.0], [70.2, 8125.0], [70.3, 8137.0], [70.4, 8137.0], [70.5, 8144.0], [70.6, 8150.0], [70.7, 8150.0], [70.8, 8163.0], [70.9, 8206.0], [71.0, 8206.0], [71.1, 8208.0], [71.2, 8216.0], [71.3, 8226.0], [71.4, 8226.0], [71.5, 8262.0], [71.6, 8263.0], [71.7, 8263.0], [71.8, 8278.0], [71.9, 8284.0], [72.0, 8284.0], [72.1, 8305.0], [72.2, 8311.0], [72.3, 8320.0], [72.4, 8320.0], [72.5, 8326.0], [72.6, 8353.0], [72.7, 8353.0], [72.8, 8365.0], [72.9, 8383.0], [73.0, 8383.0], [73.1, 8398.0], [73.2, 8401.0], [73.3, 8401.0], [73.4, 8401.0], [73.5, 8420.0], [73.6, 8452.0], [73.7, 8452.0], [73.8, 8460.0], [73.9, 8466.0], [74.0, 8466.0], [74.1, 8466.0], [74.2, 8520.0], [74.3, 8550.0], [74.4, 8550.0], [74.5, 8612.0], [74.6, 8618.0], [74.7, 8618.0], [74.8, 8636.0], [74.9, 8792.0], [75.0, 8792.0], [75.1, 8799.0], [75.2, 8802.0], [75.3, 8821.0], [75.4, 8821.0], [75.5, 8827.0], [75.6, 8833.0], [75.7, 8833.0], [75.8, 8848.0], [75.9, 8868.0], [76.0, 8868.0], [76.1, 8869.0], [76.2, 8929.0], [76.3, 8965.0], [76.4, 8965.0], [76.5, 8969.0], [76.6, 8971.0], [76.7, 8971.0], [76.8, 8987.0], [76.9, 8988.0], [77.0, 8988.0], [77.1, 8994.0], [77.2, 8995.0], [77.3, 8996.0], [77.4, 8996.0], [77.5, 9000.0], [77.6, 9005.0], [77.7, 9005.0], [77.8, 9006.0], [77.9, 9010.0], [78.0, 9010.0], [78.1, 9019.0], [78.2, 9027.0], [78.3, 9029.0], [78.4, 9029.0], [78.5, 9031.0], [78.6, 9034.0], [78.7, 9034.0], [78.8, 9035.0], [78.9, 9060.0], [79.0, 9060.0], [79.1, 9063.0], [79.2, 9071.0], [79.3, 9076.0], [79.4, 9076.0], [79.5, 9081.0], [79.6, 9084.0], [79.7, 9084.0], [79.8, 9085.0], [79.9, 9086.0], [80.0, 9086.0], [80.1, 9092.0], [80.2, 9095.0], [80.3, 9097.0], [80.4, 9097.0], [80.5, 9101.0], [80.6, 9102.0], [80.7, 9102.0], [80.8, 9120.0], [80.9, 9121.0], [81.0, 9121.0], [81.1, 9123.0], [81.2, 9130.0], [81.3, 9135.0], [81.4, 9135.0], [81.5, 9138.0], [81.6, 9138.0], [81.7, 9138.0], [81.8, 9141.0], [81.9, 9142.0], [82.0, 9142.0], [82.1, 9144.0], [82.2, 9160.0], [82.3, 9163.0], [82.4, 9163.0], [82.5, 9175.0], [82.6, 9176.0], [82.7, 9176.0], [82.8, 9187.0], [82.9, 9193.0], [83.0, 9193.0], [83.1, 9194.0], [83.2, 9195.0], [83.3, 9197.0], [83.4, 9197.0], [83.5, 9197.0], [83.6, 9199.0], [83.7, 9199.0], [83.8, 9204.0], [83.9, 9206.0], [84.0, 9206.0], [84.1, 9207.0], [84.2, 9218.0], [84.3, 9229.0], [84.4, 9229.0], [84.5, 9245.0], [84.6, 9257.0], [84.7, 9257.0], [84.8, 9263.0], [84.9, 9276.0], [85.0, 9276.0], [85.1, 9278.0], [85.2, 9284.0], [85.3, 9284.0], [85.4, 9284.0], [85.5, 9299.0], [85.6, 9317.0], [85.7, 9317.0], [85.8, 9322.0], [85.9, 9326.0], [86.0, 9329.0], [86.1, 9329.0], [86.2, 9330.0], [86.3, 9330.0], [86.4, 9330.0], [86.5, 9330.0], [86.6, 9332.0], [86.7, 9332.0], [86.8, 9334.0], [86.9, 9345.0], [87.0, 9348.0], [87.1, 9348.0], [87.2, 9352.0], [87.3, 9353.0], [87.4, 9353.0], [87.5, 9360.0], [87.6, 9360.0], [87.7, 9360.0], [87.8, 9364.0], [87.9, 9364.0], [88.0, 9367.0], [88.1, 9367.0], [88.2, 9375.0], [88.3, 9375.0], [88.4, 9375.0], [88.5, 9378.0], [88.6, 9379.0], [88.7, 9379.0], [88.8, 9379.0], [88.9, 9387.0], [89.0, 9388.0], [89.1, 9388.0], [89.2, 9388.0], [89.3, 9389.0], [89.4, 9389.0], [89.5, 9390.0], [89.6, 9391.0], [89.7, 9391.0], [89.8, 9395.0], [89.9, 9401.0], [90.0, 9403.0], [90.1, 9403.0], [90.2, 9404.0], [90.3, 9410.0], [90.4, 9410.0], [90.5, 9411.0], [90.6, 9412.0], [90.7, 9412.0], [90.8, 9413.0], [90.9, 9413.0], [91.0, 9416.0], [91.1, 9416.0], [91.2, 9417.0], [91.3, 9421.0], [91.4, 9421.0], [91.5, 9423.0], [91.6, 9424.0], [91.7, 9424.0], [91.8, 9425.0], [91.9, 9426.0], [92.0, 9434.0], [92.1, 9434.0], [92.2, 9442.0], [92.3, 9447.0], [92.4, 9447.0], [92.5, 9448.0], [92.6, 9450.0], [92.7, 9450.0], [92.8, 9453.0], [92.9, 9459.0], [93.0, 9468.0], [93.1, 9468.0], [93.2, 9472.0], [93.3, 9474.0], [93.4, 9474.0], [93.5, 9476.0], [93.6, 9478.0], [93.7, 9478.0], [93.8, 9487.0], [93.9, 9493.0], [94.0, 9518.0], [94.1, 9518.0], [94.2, 9521.0], [94.3, 9531.0], [94.4, 9531.0], [94.5, 9536.0], [94.6, 9554.0], [94.7, 9554.0], [94.8, 9557.0], [94.9, 9560.0], [95.0, 9561.0], [95.1, 9561.0], [95.2, 9564.0], [95.3, 9565.0], [95.4, 9565.0], [95.5, 9573.0], [95.6, 9584.0], [95.7, 9584.0], [95.8, 9593.0], [95.9, 9624.0], [96.0, 9636.0], [96.1, 9636.0], [96.2, 9637.0], [96.3, 9650.0], [96.4, 9650.0], [96.5, 9654.0], [96.6, 9679.0], [96.7, 9679.0], [96.8, 9689.0], [96.9, 9696.0], [97.0, 9700.0], [97.1, 9700.0], [97.2, 9713.0], [97.3, 9722.0], [97.4, 9722.0], [97.5, 9734.0], [97.6, 9740.0], [97.7, 9740.0], [97.8, 9768.0], [97.9, 9775.0], [98.0, 9786.0], [98.1, 9786.0], [98.2, 9815.0], [98.3, 9822.0], [98.4, 9822.0], [98.5, 9850.0], [98.6, 9914.0], [98.7, 9914.0], [98.8, 20519.0], [98.9, 20522.0], [99.0, 20525.0], [99.1, 20525.0], [99.2, 20525.0], [99.3, 20528.0], [99.4, 20528.0], [99.5, 20530.0], [99.6, 20535.0], [99.7, 20535.0], [99.8, 20538.0], [99.9, 20541.0]], "isOverall": false, "label": "login", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 500.0, "maxY": 31.0, "series": [{"data": [[600.0, 13.0], [700.0, 12.0], [800.0, 10.0], [900.0, 5.0], [1000.0, 12.0], [1100.0, 12.0], [1200.0, 16.0], [1300.0, 10.0], [1400.0, 10.0], [1500.0, 7.0], [1600.0, 9.0], [1700.0, 16.0], [1800.0, 31.0], [1900.0, 9.0], [2000.0, 8.0], [2100.0, 4.0], [2200.0, 4.0], [2400.0, 6.0], [2500.0, 6.0], [2600.0, 11.0], [2700.0, 6.0], [2800.0, 9.0], [2900.0, 11.0], [3000.0, 7.0], [3100.0, 19.0], [3200.0, 18.0], [3300.0, 20.0], [3400.0, 13.0], [3500.0, 5.0], [3600.0, 6.0], [3700.0, 11.0], [3800.0, 12.0], [3900.0, 16.0], [4000.0, 4.0], [4100.0, 1.0], [4300.0, 1.0], [4400.0, 9.0], [4500.0, 4.0], [4600.0, 3.0], [4700.0, 2.0], [4800.0, 4.0], [4900.0, 9.0], [5000.0, 2.0], [5100.0, 4.0], [5400.0, 1.0], [5700.0, 1.0], [5800.0, 2.0], [6100.0, 3.0], [6000.0, 1.0], [6200.0, 2.0], [6300.0, 3.0], [6400.0, 3.0], [6500.0, 5.0], [6600.0, 2.0], [6700.0, 6.0], [6800.0, 1.0], [6900.0, 4.0], [7100.0, 6.0], [7000.0, 1.0], [7400.0, 1.0], [7600.0, 3.0], [7500.0, 4.0], [7700.0, 2.0], [7800.0, 13.0], [7900.0, 7.0], [8100.0, 7.0], [8000.0, 4.0], [8200.0, 8.0], [8400.0, 7.0], [8600.0, 3.0], [8500.0, 2.0], [8300.0, 8.0], [8700.0, 2.0], [8800.0, 7.0], [8900.0, 9.0], [9000.0, 21.0], [9100.0, 23.0], [9200.0, 13.0], [9300.0, 30.0], [9400.0, 29.0], [9500.0, 13.0], [9600.0, 8.0], [9700.0, 8.0], [9800.0, 3.0], [9900.0, 1.0], [20500.0, 9.0], [500.0, 7.0]], "isOverall": false, "label": "login", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 20500.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 9.0, "minX": 1.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 584.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 107.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 584.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 9.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 350.6199999999995, "minX": 1.66403856E12, "maxY": 350.6199999999995, "series": [{"data": [[1.66403856E12, 350.6199999999995]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66403856E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 596.0, "minX": 1.0, "maxY": 20541.0, "series": [{"data": [[2.0, 20541.0], [3.0, 20535.0], [4.0, 20525.0], [5.0, 20530.0], [7.0, 20519.0], [9.0, 20525.0], [10.0, 9822.0], [11.0, 9914.0], [12.0, 9412.0], [13.0, 9453.0], [14.0, 9416.0], [15.0, 9413.0], [16.0, 9417.0], [17.0, 9379.0], [18.0, 9395.0], [19.0, 9404.0], [20.0, 9390.0], [21.0, 9367.0], [22.0, 9353.0], [23.0, 9388.0], [24.0, 9391.0], [25.0, 9679.0], [26.0, 9364.0], [27.0, 9375.0], [28.0, 9379.0], [29.0, 9388.0], [30.0, 9410.0], [31.0, 9531.0], [33.0, 9411.0], [32.0, 9850.0], [34.0, 9334.0], [37.0, 9403.0], [36.0, 9418.0], [39.0, 9421.0], [38.0, 9426.0], [41.0, 9560.0], [40.0, 9713.0], [43.0, 9696.0], [42.0, 9459.0], [45.0, 9364.0], [44.0, 9557.0], [47.0, 9654.0], [46.0, 9815.0], [49.0, 9332.0], [48.0, 9424.0], [50.0, 9322.0], [53.0, 9584.0], [52.0, 9413.0], [55.0, 9476.0], [54.0, 9689.0], [57.0, 9786.0], [56.0, 9554.0], [59.0, 9775.0], [58.0, 9360.0], [60.0, 9768.0], [62.0, 9402.0], [66.0, 9518.0], [65.0, 9330.0], [64.0, 9542.0], [71.0, 9450.0], [70.0, 9616.5], [68.0, 9290.5], [75.0, 9637.0], [74.0, 9734.0], [73.0, 9456.5], [79.0, 9257.0], [78.0, 9204.0], [77.0, 9722.0], [76.0, 9284.0], [83.0, 9378.0], [82.0, 9561.0], [81.0, 9700.0], [80.0, 9565.0], [87.0, 9536.0], [86.0, 9193.0], [85.0, 9195.0], [84.0, 9197.0], [91.0, 9299.0], [90.0, 9387.0], [89.0, 9593.0], [88.0, 9207.0], [95.0, 9442.0], [94.0, 9206.0], [93.0, 9278.0], [92.0, 9284.0], [99.0, 9138.0], [98.0, 9187.0], [97.0, 9199.0], [96.0, 9564.0], [103.0, 9624.0], [102.0, 9487.0], [101.0, 9176.0], [100.0, 9521.0], [106.0, 9086.0], [105.0, 9194.0], [104.0, 9160.0], [111.0, 9573.0], [110.0, 9360.0], [109.0, 9218.0], [108.0, 9311.0], [115.0, 9472.0], [114.0, 9135.666666666666], [119.0, 9329.0], [118.0, 9123.0], [117.0, 9266.5], [123.0, 9102.0], [122.0, 9138.0], [121.0, 9092.0], [120.0, 9276.0], [127.0, 9071.0], [126.0, 9468.0], [125.0, 9097.0], [124.0, 9474.0], [135.0, 9375.0], [134.0, 9081.0], [133.0, 9034.0], [132.0, 9029.0], [131.0, 9434.0], [130.0, 9101.0], [129.0, 9330.0], [128.0, 9120.0], [143.0, 9245.0], [142.0, 9233.0], [140.0, 9348.0], [139.0, 8995.0], [138.0, 9030.0], [136.0, 9063.0], [151.0, 8988.0], [150.0, 8994.0], [149.0, 9019.0], [148.0, 9197.0], [147.0, 9163.0], [146.0, 9317.0], [145.0, 9035.0], [144.0, 9330.0], [159.0, 9060.0], [158.0, 8971.0], [157.0, 8987.0], [156.0, 9005.0], [155.0, 9141.0], [154.0, 9000.0], [153.0, 9076.0], [152.0, 9006.0], [167.0, 8833.0], [166.0, 8636.0], [165.0, 9010.0], [164.0, 8799.0], [163.0, 9031.0], [162.0, 8929.0], [161.0, 8998.0], [175.0, 8792.0], [174.0, 8996.0], [173.0, 8802.0], [172.0, 8550.0], [171.0, 8869.0], [170.0, 9085.0], [169.0, 9084.0], [168.0, 8848.0], [183.0, 8383.0], [182.0, 8868.0], [181.0, 8401.0], [180.0, 8401.0], [179.0, 8398.0], [178.0, 8420.0], [177.0, 8827.0], [176.0, 8466.0], [191.0, 8278.0], [190.0, 8305.0], [189.0, 8353.0], [188.0, 8320.0], [187.0, 8821.0], [186.0, 8618.0], [185.0, 8326.0], [184.0, 8365.0], [199.0, 8216.0], [198.0, 8452.0], [197.0, 8206.0], [196.0, 8208.0], [195.0, 8226.0], [194.0, 8612.0], [193.0, 8520.0], [192.0, 8311.0], [207.0, 8466.0], [206.0, 8263.0], [205.0, 8150.0], [204.0, 8144.0], [203.0, 8163.0], [202.0, 8125.0], [201.0, 8137.0], [200.0, 8284.0], [215.0, 8112.0], [214.0, 8262.0], [213.0, 8091.0], [212.0, 8124.0], [211.0, 8038.0], [210.0, 8089.0], [209.0, 8044.0], [208.0, 8460.0], [223.0, 7897.0], [222.0, 7874.0], [221.0, 7915.0], [220.0, 7906.0], [219.0, 7927.0], [218.0, 7949.0], [217.0, 7927.0], [216.0, 7952.0], [231.0, 7830.0], [230.0, 7970.0], [229.0, 7849.0], [228.0, 7858.0], [227.0, 7859.0], [226.0, 7881.0], [225.0, 7822.0], [224.0, 7862.0], [239.0, 7592.0], [238.0, 7711.0], [237.0, 7842.0], [236.0, 7768.0], [234.0, 7852.0], [233.0, 7784.0], [232.0, 7817.0], [247.0, 7120.0], [246.0, 7177.0], [245.0, 7176.0], [244.0, 7675.0], [243.0, 7587.0], [242.0, 7545.0], [241.0, 7581.0], [240.0, 7606.0], [255.0, 7128.0], [254.0, 6942.0], [253.0, 7147.0], [252.0, 6970.0], [251.0, 6988.0], [250.0, 7478.0], [249.0, 7032.0], [248.0, 7136.0], [270.0, 6353.0], [271.0, 6544.0], [269.0, 6562.0], [268.0, 6689.0], [267.0, 6592.0], [266.0, 6630.0], [265.0, 6575.0], [264.0, 6570.0], [263.0, 6765.0], [257.0, 6826.0], [256.0, 6945.0], [259.0, 6756.0], [258.0, 6789.0], [262.0, 6720.0], [261.0, 6715.0], [260.0, 6717.0], [286.0, 5416.0], [287.0, 5175.0], [285.0, 5798.0], [284.0, 5805.0], [283.0, 5862.0], [282.0, 6119.0], [281.0, 6043.0], [280.0, 6179.0], [279.0, 6197.0], [273.0, 6411.0], [272.0, 6409.0], [275.0, 6243.0], [274.0, 6349.0], [278.0, 6257.0], [277.0, 6407.0], [276.0, 6330.0], [302.0, 4858.0], [303.0, 4917.0], [301.0, 4882.0], [300.0, 4731.0], [299.0, 4986.0], [298.0, 4918.0], [297.0, 4963.0], [296.0, 4972.0], [295.0, 5042.0], [289.0, 5154.0], [288.0, 5190.0], [291.0, 5117.0], [290.0, 5065.0], [294.0, 4976.0], [293.0, 4998.0], [292.0, 4973.0], [318.0, 4032.0], [319.0, 4511.0], [317.0, 4520.0], [316.0, 4055.0], [315.0, 4532.0], [314.0, 4425.0], [313.0, 4465.0], [312.0, 4440.0], [311.0, 4519.0], [305.0, 4893.0], [304.0, 4909.0], [307.0, 4698.0], [306.0, 4829.0], [310.0, 4700.0], [309.0, 4659.0], [308.0, 4679.0], [334.0, 3915.0], [335.0, 3943.0], [333.0, 3992.0], [332.0, 3973.0], [331.0, 3934.0], [330.0, 3994.0], [329.0, 3942.0], [328.0, 4341.0], [327.0, 4022.0], [321.0, 4474.0], [320.0, 4484.0], [323.0, 4447.0], [322.0, 4460.0], [326.0, 4415.0], [325.0, 3971.0], [324.0, 4432.0], [350.0, 3904.0], [351.0, 3706.0], [349.0, 3751.0], [348.0, 4183.0], [347.0, 3761.0], [346.0, 3762.0], [345.0, 3948.0], [344.0, 3766.0], [343.0, 3911.0], [337.0, 3816.0], [336.0, 4019.0], [339.0, 3965.0], [338.0, 3803.0], [342.0, 3781.0], [341.0, 3762.0], [340.0, 3892.0], [366.0, 3841.0], [367.0, 3991.0], [365.0, 3863.0], [364.0, 3701.0], [363.0, 3817.0], [362.0, 3878.0], [361.0, 3896.0], [360.0, 3859.0], [359.0, 3647.0], [353.0, 3699.0], [352.0, 3935.0], [355.0, 3875.0], [354.0, 3967.0], [358.0, 3673.0], [357.0, 3911.0], [356.0, 3685.0], [382.0, 3462.0], [383.0, 3435.0], [381.0, 3566.0], [380.0, 3717.0], [379.0, 3380.0], [378.0, 3421.0], [377.0, 3735.0], [376.0, 3448.0], [375.0, 3432.0], [369.0, 3821.0], [368.0, 3603.0], [371.0, 3441.0], [370.0, 3511.0], [374.0, 3898.0], [373.0, 3437.0], [372.0, 3780.0], [398.0, 3581.0], [399.0, 3284.0], [397.0, 3349.0], [396.0, 3292.0], [395.0, 3327.0], [394.0, 3546.0], [393.0, 3405.0], [392.0, 3380.0], [391.0, 3389.0], [385.0, 3600.0], [384.0, 3405.0], [387.0, 3442.0], [386.0, 3385.0], [390.0, 3312.0], [389.0, 3564.0], [388.0, 3314.0], [414.0, 3256.0], [415.0, 3356.0], [413.0, 3219.0], [412.0, 3256.0], [411.0, 3228.0], [410.0, 3370.0], [409.0, 3339.0], [408.0, 3299.0], [407.0, 3301.5], [401.0, 3382.0], [400.0, 3344.0], [403.0, 3419.0], [402.0, 3433.0], [406.0, 3350.0], [405.0, 3287.0], [430.0, 3306.0], [431.0, 3285.0], [429.0, 3199.0], [428.0, 3178.0], [427.0, 3188.0], [426.0, 3191.0], [425.0, 3366.0], [424.0, 3364.0], [423.0, 3172.0], [417.0, 3202.0], [416.0, 3318.0], [419.0, 3363.0], [418.0, 3245.0], [422.0, 3230.0], [421.0, 3197.0], [420.0, 3405.0], [435.0, 3165.0], [446.0, 3177.5], [447.0, 3111.0], [445.0, 3166.0], [434.0, 3182.0], [433.0, 3184.0], [432.0, 3188.0], [443.0, 3174.0], [442.0, 3213.6666666666665], [439.0, 3149.0], [438.0, 3160.0], [437.0, 3208.0], [436.0, 3256.0], [462.0, 2951.0], [463.0, 2946.0], [461.0, 2985.0], [460.0, 2973.0], [459.0, 2985.0], [458.0, 2993.0], [457.0, 2969.0], [456.0, 3017.0], [455.0, 3031.0], [449.0, 3110.0], [448.0, 3107.0], [451.0, 3090.0], [450.0, 3016.0], [454.0, 3034.0], [453.0, 3038.0], [452.0, 3089.0], [478.0, 2777.0], [479.0, 2764.0], [477.0, 2789.0], [476.0, 2801.0], [475.0, 2800.0], [474.0, 2819.0], [473.0, 2829.0], [472.0, 2859.0], [471.0, 2853.0], [465.0, 2940.0], [464.0, 2924.0], [467.0, 2902.0], [466.0, 2924.0], [470.0, 2879.0], [469.0, 2892.0], [468.0, 2889.0], [493.0, 2615.0], [495.0, 2528.0], [492.0, 2644.0], [483.0, 2673.0], [482.0, 2735.0], [481.0, 2689.0], [480.0, 2748.0], [491.0, 2642.0], [490.0, 2666.0], [489.0, 2676.0], [488.0, 2676.0], [487.0, 2698.0], [486.0, 2686.0], [485.0, 2649.0], [484.0, 2715.0], [510.0, 2034.0], [511.0, 2173.0], [509.0, 2146.0], [508.0, 2023.0], [507.0, 2482.0], [506.0, 2212.0], [505.0, 2491.0], [504.0, 2457.0], [503.0, 2496.0], [497.0, 2528.0], [496.0, 2582.0], [499.0, 2552.0], [498.0, 2462.0], [502.0, 2206.0], [501.0, 2515.0], [500.0, 2536.0], [536.0, 1866.0], [540.0, 1892.0], [543.0, 1921.0], [529.0, 1914.0], [528.0, 1886.0], [531.0, 1840.0], [530.0, 1865.0], [542.0, 1906.0], [541.0, 2099.0], [539.0, 1864.0], [538.0, 1880.0], [537.0, 1858.0], [527.0, 1874.0], [513.0, 2224.0], [512.0, 2025.0], [515.0, 2153.0], [514.0, 2279.0], [517.0, 2190.0], [516.0, 2005.0], [519.0, 1921.0], [518.0, 1913.0], [526.0, 1851.0], [525.0, 1928.0], [524.0, 1883.0], [523.0, 2067.0], [522.0, 2027.0], [521.0, 2064.0], [520.0, 1972.0], [535.0, 1857.0], [533.0, 1893.0], [572.0, 1767.0], [575.0, 1737.0], [561.0, 1789.0], [560.0, 1786.0], [563.0, 1755.0], [562.0, 1776.0], [565.0, 1749.0], [564.0, 1758.0], [574.0, 1738.0], [573.0, 1751.0], [571.0, 1734.0], [570.0, 1786.0], [569.0, 1786.0], [568.0, 1814.0], [559.0, 1802.0], [545.0, 1895.0], [544.0, 1847.0], [547.0, 1874.0], [546.0, 1828.0], [549.0, 1858.0], [548.0, 1799.0], [551.0, 1872.0], [550.0, 1852.0], [558.0, 1917.0], [557.0, 1818.0], [556.0, 1843.0], [555.0, 1844.0], [554.0, 1824.0], [553.0, 1817.0], [552.0, 1836.0], [567.0, 1817.0], [566.0, 1830.0], [604.0, 1414.0], [607.0, 1378.0], [593.0, 1509.0], [592.0, 1517.0], [595.0, 1483.0], [594.0, 1491.0], [597.0, 1482.0], [596.0, 1495.0], [606.0, 1395.0], [605.0, 1371.0], [603.0, 1393.0], [602.0, 1404.0], [601.0, 1446.0], [600.0, 1451.0], [591.0, 1525.0], [577.0, 1711.0], [576.0, 1715.0], [579.0, 1686.0], [578.0, 1653.0], [581.0, 1670.0], [580.0, 1676.0], [583.0, 1641.0], [582.0, 1651.0], [590.0, 1566.0], [589.0, 1544.0], [588.0, 1590.0], [587.0, 1598.0], [586.0, 1609.0], [585.0, 1620.0], [584.0, 1629.0], [599.0, 1467.0], [598.0, 1471.0], [633.0, 1196.0], [638.0, 1146.0], [639.0, 1136.0], [624.0, 1226.0], [626.0, 1205.0], [625.0, 1218.0], [628.0, 1189.0], [627.0, 1190.0], [637.0, 1165.0], [636.0, 1183.0], [635.0, 1163.0], [632.0, 1203.5], [615.0, 1277.0], [614.0, 1310.0], [613.0, 1295.0], [612.0, 1320.0], [611.0, 1305.0], [610.0, 1346.0], [609.0, 1330.0], [608.0, 1362.0], [623.0, 1233.0], [622.0, 1244.0], [621.0, 1265.0], [620.0, 1264.0], [619.0, 1247.0], [618.0, 1245.0], [617.0, 1257.0], [616.0, 1297.0], [630.0, 1179.0], [629.0, 1214.0], [666.0, 855.0], [670.0, 771.0], [671.0, 775.0], [656.0, 948.0], [658.0, 897.0], [657.0, 931.0], [661.0, 897.0], [660.0, 899.5], [669.0, 820.0], [668.0, 798.0], [667.0, 826.0], [664.0, 840.0], [647.0, 1038.0], [646.0, 1080.0], [645.0, 1058.0], [644.0, 1079.0], [643.0, 1077.0], [642.0, 1092.0], [641.0, 1105.0], [640.0, 1112.0], [655.0, 961.0], [654.0, 1012.0], [653.0, 997.0], [652.0, 1036.0], [651.0, 1033.0], [650.0, 1048.0], [649.0, 1031.0], [648.0, 1062.0], [663.0, 847.0], [662.0, 877.0], [700.0, 596.0], [690.0, 608.0], [689.0, 626.0], [688.0, 634.0], [687.0, 658.0], [673.0, 776.0], [672.0, 768.0], [675.0, 736.0], [674.0, 766.0], [679.0, 726.6666666666666], [676.0, 725.0], [686.0, 662.0], [685.0, 665.0], [684.0, 668.0], [683.0, 679.0], [681.0, 690.0], [680.0, 707.0], [1.0, 20538.0]], "isOverall": false, "label": "login", "isController": false}, {"data": [[350.6199999999995, 5164.905714285714]], "isOverall": false, "label": "login-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 700.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 1411.6666666666667, "minX": 1.66403856E12, "maxY": 89600.6, "series": [{"data": [[1.66403856E12, 89600.6]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.66403856E12, 1411.6666666666667]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66403856E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 5164.905714285714, "minX": 1.66403856E12, "maxY": 5164.905714285714, "series": [{"data": [[1.66403856E12, 5164.905714285714]], "isOverall": false, "label": "login", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66403856E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 4035.585714285711, "minX": 1.66403856E12, "maxY": 4035.585714285711, "series": [{"data": [[1.66403856E12, 4035.585714285711]], "isOverall": false, "label": "login", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66403856E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 277.44857142857177, "minX": 1.66403856E12, "maxY": 277.44857142857177, "series": [{"data": [[1.66403856E12, 277.44857142857177]], "isOverall": false, "label": "login", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66403856E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 589.0, "minX": 1.66403856E12, "maxY": 9914.0, "series": [{"data": [[1.66403856E12, 9914.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.66403856E12, 9385.400000000001]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.66403856E12, 9768.56]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.66403856E12, 9489.4]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.66403856E12, 589.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.66403856E12, 3817.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66403856E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 723.0, "minX": 9.0, "maxY": 20528.0, "series": [{"data": [[16.0, 5053.5], [68.0, 3972.0], [36.0, 7511.5], [165.0, 9345.0], [21.0, 6407.0], [45.0, 723.0], [93.0, 2279.0], [92.0, 3295.5], [103.0, 1395.0], [52.0, 8244.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[9.0, 20528.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 165.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 723.0, "minX": 9.0, "maxY": 20527.0, "series": [{"data": [[16.0, 4971.0], [68.0, 3963.5], [36.0, 5186.5], [165.0, 5724.0], [21.0, 4990.0], [45.0, 723.0], [93.0, 2269.0], [92.0, 3287.5], [103.0, 1387.0], [52.0, 5397.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[9.0, 20527.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 165.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 11.666666666666666, "minX": 1.66403856E12, "maxY": 11.666666666666666, "series": [{"data": [[1.66403856E12, 11.666666666666666]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66403856E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.15, "minX": 1.66403856E12, "maxY": 11.516666666666667, "series": [{"data": [[1.66403856E12, 11.516666666666667]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.66403856E12, 0.15]], "isOverall": false, "label": "503", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66403856E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.15, "minX": 1.66403856E12, "maxY": 11.516666666666667, "series": [{"data": [[1.66403856E12, 11.516666666666667]], "isOverall": false, "label": "login-success", "isController": false}, {"data": [[1.66403856E12, 0.15]], "isOverall": false, "label": "login-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66403856E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.15, "minX": 1.66403856E12, "maxY": 11.516666666666667, "series": [{"data": [[1.66403856E12, 11.516666666666667]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.66403856E12, 0.15]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66403856E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

